(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{637:function(l,c,Z){"use strict";Z.r(c);var g=Z(1),d=Object(g.a)({},(function(){var l=this,c=l.$createElement,Z=l._self._c||c;return Z("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[Z("h1",{attrs:{id:"gas-and-fees"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#gas-and-fees"}},[l._v("#")]),l._v(" Gas and Fees")]),l._v(" "),Z("p",{attrs:{synopsis:""}},[l._v("Learn about the differences between "),Z("code",[l._v("Gas")]),l._v(" and "),Z("code",[l._v("Fees")]),l._v(" in Ethereum and Cosmos.")]),l._v(" "),Z("h2",{attrs:{id:"pre-requisite-readings"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#pre-requisite-readings"}},[l._v("#")]),l._v(" Pre-requisite Readings")]),l._v(" "),Z("ul",[Z("li",{attrs:{prereq:""}},[Z("a",{attrs:{href:"https://docs.cosmos.network/master/basics/gas-fees.html",target:"_blank",rel:"noopener noreferrer"}},[l._v("Cosmos SDK Gas"),Z("OutboundLink")],1)]),l._v(" "),Z("li",{attrs:{prereq:""}},[Z("a",{attrs:{href:"https://ethereum.org/en/developers/docs/gas/",target:"_blank",rel:"noopener noreferrer"}},[l._v("Ethereum Gas"),Z("OutboundLink")],1)])]),l._v(" "),Z("p",[l._v("The concept of Gas represents the amount of computational effort required to execute specific operations on the state machine.")]),l._v(" "),Z("p",[l._v("Gas was created on Ethereum to disallow the EVM (Ethereum Virtual Machine) from running infinite\nloops by allocating a small amount of monetary value into the system. A unit of gas, usually in the\nform of a fraction of the native coin, is consumed for every operation on the EVM and requires a\nuser to pay for these operations. These operations consist in state transitions such as sending a\ntransaction or calling a contract.")]),l._v(" "),Z("p",[l._v("Exactly like Ethereum, Cosmos utilizes the concept of gas and this is how Cosmos tracks the resource\nusage of operations during execution. Operations on Cosmos are represented as read or writes done to the chain's store.")]),l._v(" "),Z("p",[l._v("In Cosmos, a fee is calculated and charged to the user during a message execution. This fee is\ncalculated from the sum of all gas consumed in a message execution:")]),l._v(" "),Z("p",[Z("span",{staticClass:"katex-display"},[Z("span",{staticClass:"katex"},[Z("span",{staticClass:"katex-mathml"},[Z("math",[Z("semantics",[Z("mrow",[Z("mi",[l._v("f")]),Z("mi",[l._v("e")]),Z("mi",[l._v("e")]),Z("mo",[l._v("=")]),Z("mi",[l._v("g")]),Z("mi",[l._v("a")]),Z("mi",[l._v("s")]),Z("mtext"),Z("mo",[l._v("∗")]),Z("mtext"),Z("mi",[l._v("g")]),Z("mi",[l._v("a")]),Z("mi",[l._v("s")]),Z("mi",[l._v("P")]),Z("mi",[l._v("r")]),Z("mi",[l._v("i")]),Z("mi",[l._v("c")]),Z("mi",[l._v("e")])],1),Z("annotation",{attrs:{encoding:"application/x-tex"}},[l._v("fee = gas ~ * ~ gasPrice\n")])],1)],1)],1),Z("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[Z("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),Z("span",{staticClass:"strut bottom",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),Z("span",{staticClass:"base displaystyle textstyle uncramped"},[Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10764em"}},[l._v("f")]),Z("span",{staticClass:"mord mathit"},[l._v("e")]),Z("span",{staticClass:"mord mathit"},[l._v("e")]),Z("span",{staticClass:"mrel"},[l._v("=")]),Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[l._v("g")]),Z("span",{staticClass:"mord mathit"},[l._v("a")]),Z("span",{staticClass:"mord mathit"},[l._v("s")]),Z("span",{staticClass:"mord mspace"}),Z("span",{staticClass:"mbin"},[l._v("∗")]),Z("span",{staticClass:"mord mspace"}),Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[l._v("g")]),Z("span",{staticClass:"mord mathit"},[l._v("a")]),Z("span",{staticClass:"mord mathit"},[l._v("s")]),Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.13889em"}},[l._v("P")]),Z("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[l._v("r")]),Z("span",{staticClass:"mord mathit"},[l._v("i")]),Z("span",{staticClass:"mord mathit"},[l._v("c")]),Z("span",{staticClass:"mord mathit"},[l._v("e")])])])])])]),l._v(" "),Z("p",[l._v("In both networks, gas is used to make sure that operations do not require an excess amount of\ncomputational power to complete and as a way to deter bad-acting users from spamming the network.")]),l._v(" "),Z("h2",{attrs:{id:"cosmos-sdk-gas"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#cosmos-sdk-gas"}},[l._v("#")]),l._v(" Cosmos SDK "),Z("code",[l._v("Gas")])]),l._v(" "),Z("p",[l._v("In the Cosmos SDK, gas is tracked in the main "),Z("code",[l._v("GasMeter")]),l._v(" and the "),Z("code",[l._v("BlockGasMeter")]),l._v(":")]),l._v(" "),Z("ul",[Z("li",[Z("code",[l._v("GasMeter")]),l._v(": keeps track of the gas consumed during executions that lead to state transitions. It is reset on every transaction execution.")]),l._v(" "),Z("li",[Z("code",[l._v("BlockGasMeter")]),l._v(": keeps track of the gas consumed in a block and enforces that the gas does not go over a predefined limit. This limit is defined in the Tendermint consensus parameters and can be changed via governance parameter change proposals.")])]),l._v(" "),Z("p",[l._v("More information regarding gas in Cosmos SDK can be found "),Z("a",{attrs:{href:"https://docs.cosmos.network/master/basics/gas-fees.html",target:"_blank",rel:"noopener noreferrer"}},[l._v("here"),Z("OutboundLink")],1),l._v(".")]),l._v(" "),Z("h2",{attrs:{id:"matching-evm-gas-consumption"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#matching-evm-gas-consumption"}},[l._v("#")]),l._v(" Matching EVM Gas consumption")]),l._v(" "),Z("p",[l._v("Haqq is an EVM-compatible chain that supports Ethereum Web3 tooling. For this reason, gas\nconsumption must be equitable with other EVMs, most importantly Ethereum.")]),l._v(" "),Z("p",[l._v("The main difference between EVM and Cosmos state transitions, is that the EVM uses a "),Z("a",{attrs:{href:"https://github.com/ethereum/go-ethereum/blob/master/params/protocol_params.go",target:"_blank",rel:"noopener noreferrer"}},[l._v("gas table"),Z("OutboundLink")],1),l._v(" for each OPCODE, whereas Cosmos uses a "),Z("code",[l._v("GasConfig")]),l._v(" that charges gas for each CRUD operation by setting a flat and per-byte cost for accessing the database.")]),l._v(" "),Z("p",[Z("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"Ly8gR2FzQ29uZmlnIGRlZmluZXMgZ2FzIGNvc3QgZm9yIGVhY2ggb3BlcmF0aW9uIG9uIEtWU3RvcmVzCnR5cGUgR2FzQ29uZmlnIHN0cnVjdCB7CglIYXNDb3N0ICAgICAgICAgIEdhcwoJRGVsZXRlQ29zdCAgICAgICBHYXMKCVJlYWRDb3N0RmxhdCAgICAgR2FzCglSZWFkQ29zdFBlckJ5dGUgIEdhcwoJV3JpdGVDb3N0RmxhdCAgICBHYXMKCVdyaXRlQ29zdFBlckJ5dGUgR2FzCglJdGVyTmV4dENvc3RGbGF0IEdhcwp9"}})],1),l._v(" "),Z("p",[l._v("In order to match the gas consumed by the EVM, the gas consumption logic from the SDK is ignored, and instead the gas consumed is calculated by subtracting the state transition leftover gas plus refund from the gas limit defined on the message.")]),l._v(" "),Z("p",[l._v("To ignore the SDK gas consumption, we reset the transaction "),Z("code",[l._v("GasMeter")]),l._v(" count to 0 and manually set it to the "),Z("code",[l._v("gasUsed")]),l._v(" value computed by the EVM module at the end of the execution.")]),l._v(" "),Z("p",[Z("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:""}})],1),l._v(" "),Z("h3",{attrs:{id:"antehandler"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#antehandler"}},[l._v("#")]),l._v(" "),Z("code",[l._v("AnteHandler")])]),l._v(" "),Z("p",[l._v("The Cosmos SDK "),Z("a",{attrs:{href:"https://docs.cosmos.network/master/basics/gas-fees.html#antehandler",target:"_blank",rel:"noopener noreferrer"}},[Z("code",[l._v("AnteHandler")]),Z("OutboundLink")],1),l._v("\nperforms basic checks prior to transaction execution. These checks are usually signature\nverification, transaction field validation, transaction fees, etc.")]),l._v(" "),Z("p",[l._v("Regarding gas consumption and fees, the "),Z("code",[l._v("AnteHandler")]),l._v(" checks that the user has enough balance to\ncover for the tx cost (amount plus fees) as well as checking that the gas limit defined in the\nmessage is greater or equal than the computed intrinsic gas for the message.")]),l._v(" "),Z("h2",{attrs:{id:"gas-refunds"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#gas-refunds"}},[l._v("#")]),l._v(" Gas Refunds")]),l._v(" "),Z("p",[l._v("In the EVM, gas can be specified prior to execution. The totality of the gas specified is consumed at the beginning of the execution (during the "),Z("code",[l._v("AnteHandler")]),l._v(" step) and the remaining gas is refunded back to\nthe user if any gas is left over after the execution. Additionally the EVM can also define gas to be refunded back to the user but those will be capped to a fraction of the used gas depending on the fork/version being used.")]),l._v(" "),Z("h2",{attrs:{id:"_0-fee-transactions"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#_0-fee-transactions"}},[l._v("#")]),l._v(" 0 Fee Transactions")]),l._v(" "),Z("p",[l._v("In Cosmos, a minimum gas price is not enforced by the "),Z("code",[l._v("AnteHandler")]),l._v(" as the "),Z("code",[l._v("min-gas-prices")]),l._v(" is\nchecked against the local node/validator. In other words, the minimum fees accepted are determined\nby the validators of the network, and each validator can specify a different minimum value for their fees.\nThis potentially allows end users to submit 0 fee transactions if there is at least one single\nvalidator that is willing to include transactions with "),Z("code",[l._v("0")]),l._v(" gas price in their blocks proposed.")]),l._v(" "),Z("p",[l._v("For this same reason, in Haqq it is possible to send transactions with "),Z("code",[l._v("0")]),l._v(" fees for transaction\ntypes other than the ones defined by the "),Z("code",[l._v("evm")]),l._v(" module. EVM module transactions cannot have "),Z("code",[l._v("0")]),l._v(" fees\nas gas is required inherently by the EVM. This check is done by the EVM transactions stateless validation\n(i.e "),Z("code",[l._v("ValidateBasic")]),l._v(") function as well as on the custom "),Z("code",[l._v("AnteHandler")]),l._v(" defined by Haqq.")]),l._v(" "),Z("h2",{attrs:{id:"gas-estimation"}},[Z("a",{staticClass:"header-anchor",attrs:{href:"#gas-estimation"}},[l._v("#")]),l._v(" Gas estimation")]),l._v(" "),Z("p",[l._v("Ethereum provides a JSON-RPC endpoint "),Z("code",[l._v("eth_estimateGas")]),l._v(" to help users set up a correct gas limit in their transactions.")]),l._v(" "),Z("p",[l._v("Unfortunately, we cannot make use of the SDK "),Z("code",[l._v("tx simulation")]),l._v(" for gas estimation because the pre-check in the Ante Handlers would require a valid signature, and the sender balance to be enough to pay for the gas. But in Ethereum, this endpoint can be called without specifying any sender address.")]),l._v(" "),Z("p",[l._v("For that reason, a specific query API "),Z("code",[l._v("EstimateGas")]),l._v(" is implemented in Haqq. It will apply the transaction against the current block/state and perform a binary search in order to find the optimal gas value to return to the user (the same transaction will be applied over and over until we find the minimum gas needed before it fails). The reason we need to use a binary search is that the gas required for the\ntransaction might be higher than the value returned by the EVM after applying the transaction, so we need to try until we find the optimal value.")]),l._v(" "),Z("p",[l._v("A cache context will be used during the whole execution to avoid changes be persisted in the state.")]),l._v(" "),Z("p",[Z("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:""}})],1)])}),[],!1,null,null,null);c.default=d.exports}}]);